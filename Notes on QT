QT Quick is an umbrella term that includes 
 - MQL - Markup language for user interfaces
 - JAvascript
 - QT c++ - enhanced c++ library
 Similar to HTML, QML is a markup language
 It is composed of tags, called types in Qt Quick, that are enclosed in curly brackets: Item {}
 UI is front end make with QML, QTc++ is backend
 Qt is a cross-platform software development framework being used to create native embedded, desktop and mobile applications. It is written in C++which implements a wide range of different features you might need in your platform.
 Qt Widgets provides a library of UI elements which allow you to create classic desktop-style user interfaces. 
 Qt Quick is a library providing types and functionalities for building modern, fluid, animated UIs.
 

Qt Designer: Sub tool used to create/edit widget files (.ui). You can use it to create the graphical layouts (.ui files only). The most use is to design the graphical stuff in PyQt apps. It is installed always when you install Qt, for example it is in the path: Qt5.13.1\5.13.1\mingw73_64\bin\designer.exe. It also be used to edit any .ui file of a Qt C++ application, however it is very limited since only allows to edit the graphical stuff (not C++ logic).
Qt Quick Designer (it refers to Qt Creator): It does not exist, it is integrated in Qt Creator (see below). Is normal to say that Qt Quick Designer allows to edit QML files (.qml), however it is integrated in Qt Creator now.
Qt Creator: This is the so defacto and most powerfull IDE to create QT applications natively (C++ with Qt engine). It allows you to create, edit source code, debug applications, etc. In addition to that, yo can open a .ui file or a .qml file in Qt Creator and it will open and allow you to edit. For example if you open an .ui file it will show you the Qt Designer app embedded in the full integrated Qt Creator IDE. In summary, you can use Qt Creator to open/edit any .ui or .qml file and create Qt/C++ applications. Of course, if the file is .ui then Qt Creator will show you the Qt Designer tool, if it is .qml then it will allow you to edit the QML.

great description of QT Quick VS QT Widget : https://stackoverflow.com/questions/8626355/qt-quick-vs-qt-widget#:~:text=Qt%20Quick%20is%20a%20declarative,are%20common%20in%20smartphone%20apps.&text=Qt%20Widget%20is%20the%20traditional%20desktop%2Doriented%20UI%20model.

difference between headers and source files c++ review: http://www.cplusplus.com/articles/Gw6AC542/#:~:text=So%20what's%20the%20difference%20between,%2C%20but%20you%20shouldn't.

Qt Creator supports the Qt Resource System, which is a platform-independent mechanism for storing files in the application's executable.
So like you can have text file that contains all the file names you've made so far so even if the user exits out and reopens the executable you will preserve that list to be able to delete them. 
http://doc.qt.io/qt-5/resources.html

The QTDesigner, which is what you use to drag and drop design your .ui files, has a whole manual: https://doc.qt.io/qt-5/qtdesigner-manual.html
Note that QTDesigner I'm pretty sure is just for QTWidgets. If not, the difference would be QTWidgets allows you to use the simply signal slot mechanism to make actions happen.

how to make QT's IDE automatically beautify your code with indentions and such when you save : https://doc.qt.io/qtcreator/creator-beautifier.html

You want to "deploy" i.e. make your executable as a static library not shared. static means it is a standalone executable : https://doc.qt.io/qt-5/deployment.html

plugin .dll's need to be in there own directory

platforms: C:\Qt\5.15.0\msvc2019_64\plugins
.dll's C:\Qt\5.15.0\msvc2019_64\bin

How to code the Open and Save buttons : https://doc.qt.io/archives/qt-5.6/gettingstartedqt.html

QT Designer Manual : https://doc.qt.io/archives/qt-5.6/qtdesigner-manual.html you can click on one of them and use the arrows at the cottom of the page to go to the next

You can draw connections between widgets by hitting F4 (or Edit->EditSignals/Slots) then click and drag from one widget to another. This was how I had a dial change the value of a Spin box. You can also have widgets effect windows and such. https://doc.qt.io/archives/qt-5.6/designer-connection-mode.html

Really good explaination of all the different types of containers available: https://doc.qt.io/archives/qt-5.6/designer-using-containers.html

you can make a signal trigger another signal. This is for situations where you have a button that can either be pressed or "pressed" when the user presses another button. An example would be a "compile & load" button would simply signal the signal for the "compile" button and the "load" buttons independently so they can also be pressed independently but you don't have duplicated code.

We can make QTObjects instead of C++ Objects for some added benefits: https://doc.qt.io/archives/qt-5.6/object.html

all of the examples: https://doc.qt.io/qt-5/qtexamplesandtutorials.html
all of the example layouts like spreadsheets and trees: https://doc.qt.io/qt-5/examples-itemviews.html

Ctrl+I auto-indents whatever you have highlighted if you enabled the bautifyer

if you delete a slot function you might have to go to the mainwindow.h file and remove that function there too for it to build

This is how I made a button to let the user select a directory (getExistingDirectory) : https://doc.qt.io/qt-5/qfiledialog.html#getExistingDirectory

if you have a QLineEdit Widget that displays a filename or path, set it to "readOnly" in it's properties panel on the right

the model/view programming basically makes it so widgets don't inherently store data, instead the widget is the "view" of the data in the "model".
model/view tutorial for QT Widgets is here: https://doc.qt.io/qt-5/modelview.html
Any class can be a model if it implements the QAbstractItemModel interface
A view (aka a widget) receives a pointer to a model and then can start displaying it, reading it, and editing it
View widgets and regular widgets are different classes. So like if you want to do a Table you could use the standard QTableWidget or the view version QTableView
List of all model/view classes: https://www3.sra.co.jp/qt/relation/doc/qtwidgets/model-view-programming.html#model-view-classes

how to convert a binary Qstring to a hex Qstring : https://stackoverflow.com/questions/51464956/converting-a-qstring-with-a-binary-into-a-qstring-with-a-hex
how to convert a QString to Int : https://stackoverflow.com/questions/16633555/how-to-convert-qstring-to-int/16633704
how to convert a hex QString to binary QString with specifying the number of bits : https://stackoverflow.com/questions/45342229/converting-hex-into-binary-in-qt/45343255#45343255

how to run a command line process (do ctr F to find the example where it says "For example, the following code snippet runs the analog clock example in") : https://doc.qt.io/qt-5/qprocess.html
how to pass parameters in QT properly, the second option in the article is what I used : https://www.geeksforgeeks.org/parameter-passing-techniques-in-c-cpp/
Never use QString*, like ever. Just use QString by itself. 

list of books QT recommends for learning how to program with threading : https://doc.qt.io/archives/qt-4.8/threads.html
QT Article talking about what most people do wrong with threading and event loops : https://wiki.qt.io/Threads_Events_QObjects

networking -----
network programming and FTP with QT an overview : https://doc.qt.io/qt-5/qtnetwork-programming.html
another good overview : http://martchus.no-ip.biz/doc/qt5/qtdoc/topics-network-connectivity.html
list of all qt TCP/IP classes : https://doc.qt.io/qt-5/qtnetwork-module.html#details
Classes: (all of this info came from the networking overview link above) 
QNetworkAccessManager - Once a request has been created, this class is used to dispatch it and emit signals to report on its progress
 - explanation of why you don't use qftp and how to use qnetworkaccessmanager for ftp: https://stackoverflow.com/questions/32566979/how-is-ftp-supposed-to-work-with-qnetworkaccessmanager
QNetworkInterface - Listing of the host's IP addresses and network interfaces
QNetworkReply - Contains the data and headers for a request sent with QNetworkAccessManager - replies on the network are represented by these objects with the NetworkAccessManager creating them when a request is sent out. Note that The signals provided by QNetworkReply can be used to monitor each reply individually, or developers may choose to use the manager's signals for this purpose instead and discard references to replies
QNetworkRequest - Holds a request to be sent with QNetworkAccessManager - contains the data, headers, and encryption used. when you construct this object, the url you provide determines the protocol used (i.e. HTTP or FTP) FTP is supported with this
QSslKey - Interface for private and public keys
QTcpServer - TCP-based server - If you need to handle incoming TCP connections (e.g., in a server application), use the QTcpServer class.
QTcpSocket - TCP is a reliable, stream-oriented, connection-oriented transport protocol. 
 - we want to set it up asynchronously and as nonblocking 
 - A TCP connection must be established to a remote host and port before any data transfer can begin. 
 - Once the connection has been established, the IP address and port of the peer are available through 
 - QTcpSocket::peerAddress() and QTcpSocket::peerPort(). At any time, the peer can close the connection, 
 - and data transfer will then stop immediately. QTcpSocket represents two independent streams of data: 
 - one for reading and one for writing which are QTcpSocket::write() and QTcpSocket::read(). Since 
 - QTcpSocket inherits QIODevice, you can use it with QTextStream and QDataStream. When reading from a 
 - QTcpSocket, you must make sure that enough data is available by calling QTcpSocket::bytesAvailable() beforehand.
 - using any of the TcpSocket's "waitFor" methods makes it blocking which we don't want. (blocking in this instance means no other communications can take place)
 - Synchronous sockets often lead to code with a simpler flow of control. The main disadvantage of the waitFor...() 
 - approach is that events won't be processed while a waitFor...() function is blocking. If used in the GUI thread, 
 - this might freeze the application's user interface. For this reason, we recommend that you use synchronous sockets 
 - only in non-GUI threads. When used synchronously, QTcpSocket doesn't require an event loop.
 - synchronous: means using the waitFor commands, has simplier flow of control, might freeze the GUI, doesn't require an event loop
 - asynchronously: means most of TcpSocket's functions are already asynchronous, asynchronously also means nonblocking, recommended
 - example of TcpSockets: https://doc.qt.io/qt-5/qtnetwork-fortuneclient-example.html
QUdpSocket - UDP is a lightweight, unreliable, datagram-oriented, connectionless protocol. It can be used when reliability isn't important. For example, a server that reports the time of day could choose UDP. If a datagram with the time of day is lost, the client can simply make another request.
QHostInfo - Before establishing a network connection, QTcpSocket and QUdpSocket perform a name lookup, translating the host name you're connecting to into an IP address. This operation is usually performed using the DNS (Domain Name Service) protocol. QHostInfo provides a static function that lets you perform such a lookup yourself. 
Qt Websockets - An alternative to direct TCP or HTTP communication is to use the WebSocket protocol (RFC 6455). It is a two-way communication protocol on top of the TCP protocol to utilize existing web infrastructure without having to create additional client-server based communication. The Qt WebSockets module provides both a QML and C++ API, in addition to several examples to demonstrate its use.
QFtp - a standalone module that you can download and use, but it is no longer considered good practice, QNetworkAccessManager should be used instead : https://stackoverflow.com/questions/14111120/qt-code-to-get-list-of-files-from-ftp-server-using-qnetworkaccessmanager/14113980#14113980
Adding QNetworkAccessManager is not that easy. You either use += QtNetwork for a qmake file or add the line "set(QT_USE_QTNETWORK true) #This includes the QtNetwork Module so that we can use QNetworkAccessManager" for a CMake file

see the text file "git info" for learning how to add version control to a project 

All QNetworkAccessManager examples:
https://www.bogotobogo.com/Qt/Qt5_Network_Http_Files_Download_Example.php
https://evileg.com/en/post/255/
https://evileg.com/en/post/109/
https://stackoverflow.com/questions/56838088/qt-ftp-upload-to-server-with-credentials
https://android.developreference.com/article/22609177/QT+QNetworkAccessManager+to+download+file+from+ftp+server+not+working

lcd means change directory on your local machine
cd means change directory on the machine you are connected to over ftp

QFileName.resize(0); clears all the text in a file :  https://forum.qt.io/topic/12307/qt-clear-the-contents-of-a-qfile







