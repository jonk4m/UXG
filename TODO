include in the manual that the user must create the fpcs prior to creating the signals or else they won't be able to select the pattern that each signal corresponds to 
include in manual that you don't have to type hz or degrees everytime 
include in manual why you can't just download an fpcs file from the web ftp and then it will say the header is wrong. (it's because you have to import from my application so the application can rewrite the header)


implement "delete table from UXG" button 
Add barker codes as an option
add batch text file
create "connect to uxg" tab
decide on what to do about signal creator tab
go through todo's in the code
add functionailty to edit previous patterns in a table
meet with Jeremy and Dave
Make table visualization 
add "clear" button for pattern editing so the current pattern is cleared
add "clear all entries" button for a table probably under the table visualizer
figure out why uniform noise doesn't just happen at the one specified freq
double check that freq entries are relative not absolute
make the state of the first pattern be "off"
fix the hex conversion so it doesn't chop off bits? 
increment default table name
add in code that lets the user know the max phase value allowed is 180
add in code that tells the user if they've reached the 512 max patterns
figure out how to get the comment in increment correctly if you are opening an existing table
add a "delete all pdw files on uxg" and "delete all Freq/Phase Tables on UXG" buttons to the connect to UXG tab
figure out how to retrieve and parse diagnostic info from the UXG (prolly using status register) to know how it's doing as well as knowing when a file is finished playing for the rotor to know
allow user to select a file from the UXG to edit, then add functionality so when they upload it first deletes the old one of that name
Add these SCPI commands to happen after the ftp process uploads a file:
  //This step imports the csv table values into the current table but does not create a file from those values
  MEMory:IMPort:ASCii:FPCSetup TestTable.csv
  //store and export both use the SCPI command EXPort. The way it knows to export as a CSV or FPCS and put it in the correct file location accordingly is you have to specify in the file name either .csv or .fpcs
  //This step takes the data of the current table and exports it into a FPCS file on the UXG so it can be used later
  MEMory:EXPort:ASCii:FPCSetup TestTable.fpcs
  //this step sets the current table to the exported FPCS file we just made
  SOURce:PULM:STReam:FPCSetup:SELect TestTable.fpcs
Allow user to choose from list of hostnames or IP's in the "connect to UXG" tab for choosing the current UXG
Using :MEMory:FREE[:ALL]? have the code check if there's enough room on the UXG for the file before uploading it (there's got to be a function with QFile to check the size and make sure there's enough room comparing that size)
Have a startup function routine that does things like turn the display off, turn Modulation On, etc.
----------------------------------------------------------------------------------------------Add a self-test button on the connect page
----------------------------------------------------------------------------------------------Add a power-off button to the connect page
Add checks for the user inputs that they're in fact numbers when we expect them to be 



On the documentation User's Guide/Streaming Mode Use/FrequencyPhase Coding Files  at the top, the third "NOTE" down says "This topic does not apply to Streaming when File is the Streaming Source selection." So wtf do we use as a reference for that?
It appears I should be using FPC not FPCS since FPCS is for FCP operation whereas FPC is for streaming. 





ALWAYS SELECT AND LOAD FROM AN FPCS FILE





UPLOAD BUTTON CLICKED
Put the csv file on the uxg using ftp - check that the table isn't empty on the uxg
import the csv file into the current table - check that the current table's values match the csv's 
export the current table's values into an fpcs file of the same name - check that the file that was exported when viewed is in hex. IT ISN'T THIS IS WHERE SHIT IS GOING WRONG
set the current table to be that fpcs file - just check the name of the current file on the UXG


IN ORDER TO EXPORT THE CURRENT TABLE AS A CSV, YOU HAVE TO LOAD IT THEN EXPORT IT. BUT TO STORE THE CURRENT TABLE AS A FPCS, YOU JUST HAVE TO 


SETTING AN FPCS FILE TO BE THE CURRENT TABLE DOES NOTHING. THE VALUES OF THE CURRENT TABLE DON'T CHANGE. YOU HAVE TO IMPORT FROM THE FPCS FILE FOR THE CURRENT TABLE'S VALUES TO MATCH THE FILE'S 

:MEMory:EXPort:ASCii:FPCSetup "testFile.fpcs" WILL ALWAYS OUTPUT THE FILE AS A CSV EVEN IF YOU TELL IT TO DO IT AS AN FPCS (THAT COMES STRAIGHT FROM THE DOCUMENTATION)
SO HOW DO I GO FROM A CSV TO AN FPCS???? WHY ISN'T THERE A :MEMory:STORE:ASCii:FPCSetup "testFile.fpcs"  SCPI COMMAND? There is, it's SOURce:PULM:STReam:FPCSetup:STORe 




